name: Qualcomm Upstream Version Promotion Reusable Workflow
description: |
  The purpose of this workflow is to take a given tag that exists in the upstream repository
  that the package repo tracks, and then import it with git-buildpackage so that it makes its
  way in the upstream and debian branch. It also takes care of increasing the version number
  in the changelog file. The tracked upstream repo needs to be properly configured in the
  debian/watch file.

on:
  workflow_call:
    inputs:

      qcom-build-utils-ref:
        description: The ref name that was used to invoke this reusable workflow
        type: string
        required: true

      upstream-tag:
        description: The tag in the upstream repo to promote to.
        type: string
        required: true

      upstream-repo:
        description: The upstream git repo adress
        type: string
        required: true

      promote-changelog:
        description: Run the gbp dch command to promote changelog version
        type: boolean
        default: false

    secrets:
      TOKEN:
        required: true

permissions:
  contents: write

env:
  NORMALIZED_VERSION: ""
  DISTRIBUTION: noble

  #TODO : Check if a PR branch already exist. This wwould mean that someone or something triggered the
  # promotion more than once before it was merged

jobs:
  promote-upstream-version:

    runs-on: ubuntu-latest

    # To update this container, update the /docker/Dockerfile and run the "Container Build And Upload" action
    container:
      image: ghcr.io/qualcomm-linux/pkg-builder:latest
      credentials:
        username: ${{ vars.DEB_PKG_BOT_CI_USERNAME }}
        password: ${{ secrets.TOKEN }}

    steps:

      - name: Ensure Workspace Is Clean
        run: rm -rf *

      # Normalizing a tag : (e.g ) v1.0.0 -> 1.0.0
      - name: Normalize Tag Version
        run: |
          echo "ℹ️Input upstream-tag is : ${{inputs.upstream-tag}}"

          NORMALIZED_VERSION=$(echo "${{inputs.upstream-tag}}" | sed 's/^v//')
          echo "NORMALIZED_VERSION=$NORMALIZED_VERSION" >> $GITHUB_ENV

          echo "ℹ️Normalized version : $NORMALIZED_VERSION"

      - name: Checkout qcom-build-utils
        uses: actions/checkout@v4
        with:
          repository: qualcomm-linux/qcom-build-utils
          ref: ${{inputs.qcom-build-utils-ref}}
          token: ${{secrets.TOKEN}}
          path: ./qcom-build-utils
          fetch-depth: 1
          sparse-checkout: |
            .github
            scripts

      # Fetch all history for all tags and branches
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: false # A rm -rf * was done first, don't clean otherwise this would delete qcom-build-utils cloned above
          token: ${{secrets.TOKEN}}
          path: ./package-repo
          fetch-depth: 0

      - name: Fetch All Branches and Tags
        run: |
          cd ./package-repo

          git branch
          git tag
          git checkout debian/latest
          echo "Listing all the current tags :"
          git tag --list
          if git ls-remote --exit-code --heads origin upstream/latest; then
            git checkout upstream/latest # Checkout this branch just to make sure it exists locally after its been fetched as gbp will need it later
            git checkout - # Then revert back to debian/latest branch as we will need to have it checked out for gbp later
          fi


      - name: Make sure the upstream tag is not already part of the repo
        run: |
          cd ./package-repo

          if (git tag --list | grep "${{inputs.upstream-tag}}"); then
            echo "❌ The supplied upstream tag is wrong as it pertains to this repo already."
            exit 1
          fi

      - name: Determine If Requested Tag Already Exist In upstream/
        run: |
          cd ./package-repo

          if (git tag --list | grep "upstream/${{env.NORMALIZED_VERSION}}"); then
            echo "❌ It appears like this repo has already integrated the upstream tag '${{inputs.upstream-tag}}'" \
                 " because a local tag 'upstream/$NORMALIZED_VERSION' already exists."
            exit 1
          else
            echo "✅ TODO MAKE SURE WE ARE NOT REGRESSING"
          fi

      - name: Add Upstream Link As A Remote And Fetch Tags
        run: |
          cd ./package-repo
          git remote add upstream-source git@github.com:${{inputs.upstream-repo}}.git
          git fetch upstream-source "+refs/tags/*:refs/tags/*"

      - name: Clone Upstream Repo At Specified Tag
        uses: actions/checkout@v4
        with:
          repository: ${{inputs.upstream-repo}}
          ref: ${{inputs.upstream-tag}}
          token: ${{secrets.TOKEN}}
          path: ./upstream-repo
          fetch-depth: 1

      - name: Pre-populate the upstream/latest branch if first promotion
        run: |
          cd ./package-repo

          # If the upstream/latest branch does not exist yet, create it and give it
          # the history of upstream directly, instead of creating an --allow-empty commit
          # which will be dragged along.
          if ! git ls-remote --exit-code --heads origin upstream/latest; then
            git checkout --orphan upstream/latest

            git rm -r --cached .github *

            rm -r .github *

            git reset --hard ${{inputs.upstream-tag}}

            git checkout debian/latest
          fi

      - name: GBP Import Orig
        run: |
          cd ./package-repo

          git config user.name "${{vars.DEB_PKG_BOT_CI_NAME}}"
          git config user.email "${{vars.DEB_PKG_BOT_CI_EMAIL}}"
          
          git checkout -b debian/pr/${{env.NORMALIZED_VERSION}}-1

          # Run gbp with --no-merge, this is because we do not want gbp to perform the final merging of upstream/latest into debian/latest
          # This because in upstream/latest, the top commit is the one of the filtering of git, github and debian folder. gbp will complain
          # the merge is unseccessful because we want to merge with debian/latest, which has a workflow in .github, resulting in a merge conflict
          # where in one branch we deleted .github folder, and the other we add files. We will therefore take the matter in our own hands manually after.

          gbp import-orig \
            --verbose \
            --upstream-branch=upstream/latest \
            --debian-branch=debian/pr/${{env.NORMALIZED_VERSION}}-1 \
            --no-pristine-tar \
            --upstream-vcs-tag=${{inputs.upstream-tag}} \
            --upstream-version=${{env.NORMALIZED_VERSION}} \
            --upstream-tag="upstream/%(version)s" \
            --import-msg=$'Merge commit after import of upstream %(version)s.\n\nFiltered out upstream .git/, .github/ and debian/ folders\n\nSigned-off-by: Github Service Bot <githubservice@qti.qualcomm.com>' \
            --filter=.git \
            --filter=.github \
            --filter=debian \
            --no-merge \
            ../upstream-repo

            git merge \
              --allow-unrelated-histories \
              --signoff \
              -m "Merge upstream/1.0.0 into debian/latest" \
              -m "Filtered out .git, .github and debian from upstram, and preserved .github debian/latest" \
              upstream/latest

      - name: Promote Changelog
        run: |
          cd ./package-repo

          export DEBFULLNAME="${{vars.DEB_PKG_BOT_CI_NAME}}"
          export DEBEMAIL="${{vars.DEB_PKG_BOT_CI_EMAIL}}"

          # use ignore branch because we are not on default debian branch
          gbp dch \
            --ignore-branch \
            --distribution=${{env.DISTRIBUTION}} \
            --new-version=${{env.NORMALIZED_VERSION}}-1

          git commit -a -s -m "Update changelog for ${{env.NORMALIZED_VERSION}}-1 release"

      - name: Push Upstream/latest and debian PR Branch
        run: |
          cd ./package-repo

          # Push upstream/latest branch promoted to the tag
          git push origin upstream/latest
          # Push that new tag
          git push origin upstream/${{env.NORMALIZED_VERSION}}

          git push origin debian/pr/${{env.NORMALIZED_VERSION}}-1

      - name: Open Promotion PR
        run: |
          cd ./package-repo

          gh auth login --with-token <<< "${{secrets.TOKEN}}"

          gh pr create \
            --title "Promote upstream version ${{env.NORMALIZED_VERSION}}" \
            --body "Automated PR to test upstream version promotion.\nCheckout this branch locally and push additional commits to make the build pass if need be." \
            --base debian/latest \
            --head debian/pr/${{env.NORMALIZED_VERSION}}-1
